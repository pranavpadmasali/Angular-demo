{"version":3,"file":"ngx-webcam.js","sources":["ng:/ngx-webcam/src/app/modules/webcam/domain/webcam-image.ts","ng:/ngx-webcam/src/app/modules/webcam/util/webcam.util.ts","ng:/ngx-webcam/src/app/modules/webcam/webcam/webcam.component.ts","ng:/ngx-webcam/src/app/modules/webcam/webcam.module.ts","ng:/ngx-webcam/src/app/modules/webcam/domain/webcam-init-error.ts","ng:/ngx-webcam/src/app/modules/webcam/domain/webcam-mirror-properties.ts","ng:/ngx-webcam/ngx-webcam.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Container class for a captured webcam image\r\n * @author basst314, davidshen84\r\n */\r\nexport class WebcamImage {\r\n\r\n  public constructor(imageAsDataUrl: string, mimeType: string, imageData: ImageData) {\r\n    this._mimeType = mimeType;\r\n    this._imageAsDataUrl = imageAsDataUrl;\r\n    this._imageData = imageData;\r\n  }\r\n\r\n  private readonly _mimeType: string = null;\r\n  private _imageAsBase64: string = null;\r\n  private readonly _imageAsDataUrl: string = null;\r\n  private readonly _imageData: ImageData = null;\r\n\r\n\r\n  /**\r\n   * Extracts the Base64 data out of the given dataUrl.\r\n   * @param dataUrl the given dataUrl\r\n   * @param mimeType the mimeType of the data\r\n   */\r\n  private static getDataFromDataUrl(dataUrl: string, mimeType: string) {\r\n    return dataUrl.replace(`data:${mimeType};base64,`, '');\r\n  }\r\n\r\n  /**\r\n   * Get the base64 encoded image data\r\n   * @returns base64 data of the image\r\n   */\r\n  public get imageAsBase64(): string {\r\n    return this._imageAsBase64 ? this._imageAsBase64\r\n      : this._imageAsBase64 = WebcamImage.getDataFromDataUrl(this._imageAsDataUrl, this._mimeType);\r\n  }\r\n\r\n  /**\r\n   * Get the encoded image as dataUrl\r\n   * @returns the dataUrl of the image\r\n   */\r\n  public get imageAsDataUrl(): string {\r\n    return this._imageAsDataUrl;\r\n  }\r\n\r\n  /**\r\n   * Get the ImageData object associated with the canvas' 2d context.\r\n   * @returns the ImageData of the canvas's 2d context.\r\n   */\r\n  public get imageData(): ImageData {\r\n    return this._imageData;\r\n  }\r\n\r\n}\r\n","export class WebcamUtil {\r\n\r\n  /**\r\n   * Lists available videoInput devices\r\n   * @returns a list of media device info.\r\n   */\r\n  public static getAvailableVideoInputs(): Promise<MediaDeviceInfo[]> {\r\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n      return Promise.reject('enumerateDevices() not supported.');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      navigator.mediaDevices.enumerateDevices()\r\n        .then((devices: MediaDeviceInfo[]) => {\r\n          resolve(devices.filter((device: MediaDeviceInfo) => device.kind === 'videoinput'));\r\n        })\r\n        .catch(err => {\r\n          reject(err.message || err);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import {AfterViewInit, Component, EventEmitter, Input, OnDestroy, Output, ViewChild} from '@angular/core';\r\nimport {WebcamInitError} from '../domain/webcam-init-error';\r\nimport {WebcamImage} from '../domain/webcam-image';\r\nimport {Observable, Subscription} from 'rxjs';\r\nimport {WebcamUtil} from '../util/webcam.util';\r\nimport {WebcamMirrorProperties} from '../domain/webcam-mirror-properties';\r\n\r\n@Component({\r\n  selector: 'webcam',\r\n  templateUrl: './webcam.component.html',\r\n  styleUrls: ['./webcam.component.scss']\r\n})\r\nexport class WebcamComponent implements AfterViewInit, OnDestroy {\r\n  private static DEFAULT_VIDEO_OPTIONS: MediaTrackConstraints = {facingMode: 'environment'};\r\n  private static DEFAULT_IMAGE_TYPE: string = 'image/jpeg';\r\n  private static DEFAULT_IMAGE_QUALITY: number = 0.92;\r\n\r\n  /** Defines the max width of the webcam area in px */\r\n  @Input() public width: number = 640;\r\n  /** Defines the max height of the webcam area in px */\r\n  @Input() public height: number = 480;\r\n  /** Defines base constraints to apply when requesting video track from UserMedia */\r\n  @Input() public videoOptions: MediaTrackConstraints = WebcamComponent.DEFAULT_VIDEO_OPTIONS;\r\n  /** Flag to enable/disable camera switch. If enabled, a switch icon will be displayed if multiple cameras were found */\r\n  @Input() public allowCameraSwitch: boolean = true;\r\n  /** Parameter to control image mirroring (i.e. for user-facing camera). [\"auto\", \"always\", \"never\"] */\r\n  @Input() public mirrorImage: string | WebcamMirrorProperties;\r\n  /** Flag to control whether an ImageData object is stored into the WebcamImage object. */\r\n  @Input() public captureImageData: boolean = false;\r\n  /** The image type to use when capturing snapshots */\r\n  @Input() public imageType: string = WebcamComponent.DEFAULT_IMAGE_TYPE;\r\n  /** The image quality to use when capturing snapshots (number between 0 and 1) */\r\n  @Input() public imageQuality: number = WebcamComponent.DEFAULT_IMAGE_QUALITY;\r\n\r\n  /** EventEmitter which fires when an image has been captured */\r\n  @Output() public imageCapture: EventEmitter<WebcamImage> = new EventEmitter<WebcamImage>();\r\n  /** Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions) */\r\n  @Output() public initError: EventEmitter<WebcamInitError> = new EventEmitter<WebcamInitError>();\r\n  /** Emits when the webcam video was clicked */\r\n  @Output() public imageClick: EventEmitter<void> = new EventEmitter<void>();\r\n  /** Emits the active deviceId after the active video device was switched */\r\n  @Output() public cameraSwitched: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  /** available video devices */\r\n  public availableVideoInputs: MediaDeviceInfo[] = [];\r\n\r\n  /** Indicates whether the video device is ready to be switched */\r\n  public videoInitialized: boolean = false;\r\n\r\n  /** If the Observable represented by this subscription emits, an image will be captured and emitted through\r\n   * the 'imageCapture' EventEmitter */\r\n  private triggerSubscription: Subscription;\r\n  /** Index of active video in availableVideoInputs */\r\n  private activeVideoInputIndex: number = -1;\r\n  /** Subscription to switchCamera events */\r\n  private switchCameraSubscription: Subscription;\r\n  /** MediaStream object in use for streaming UserMedia data */\r\n  private mediaStream: MediaStream = null;\r\n  @ViewChild('video', { static: true }) private video: any;\r\n  /** Canvas for Video Snapshots */\r\n  @ViewChild('canvas', { static: true }) private canvas: any;\r\n\r\n  /** width and height of the active video stream */\r\n  private activeVideoSettings: MediaTrackSettings = null;\r\n\r\n  /**\r\n   * If the given Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter\r\n   */\r\n  @Input()\r\n  public set trigger(trigger: Observable<void>) {\r\n    if (this.triggerSubscription) {\r\n      this.triggerSubscription.unsubscribe();\r\n    }\r\n\r\n    // Subscribe to events from this Observable to take snapshots\r\n    this.triggerSubscription = trigger.subscribe(() => {\r\n      this.takeSnapshot();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If the given Observable emits, the active webcam will be switched to the one indicated by the emitted value.\r\n   * @param switchCamera Indicates which webcam to switch to\r\n   *   true: cycle forwards through available webcams\r\n   *   false: cycle backwards through available webcams\r\n   *   string: activate the webcam with the given id\r\n   */\r\n  @Input()\r\n  public set switchCamera(switchCamera: Observable<boolean | string>) {\r\n    if (this.switchCameraSubscription) {\r\n      this.switchCameraSubscription.unsubscribe();\r\n    }\r\n\r\n    // Subscribe to events from this Observable to switch video device\r\n    this.switchCameraSubscription = switchCamera.subscribe((value: boolean | string) => {\r\n      if (typeof value === 'string') {\r\n        // deviceId was specified\r\n        this.switchToVideoInput(value);\r\n      } else {\r\n        // direction was specified\r\n        this.rotateVideoInput(value !== false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get MediaTrackConstraints to request streaming the given device\r\n   * @param deviceId\r\n   * @param baseMediaTrackConstraints base constraints to merge deviceId-constraint into\r\n   * @returns\r\n   */\r\n  private static getMediaConstraintsForDevice(deviceId: string, baseMediaTrackConstraints: MediaTrackConstraints): MediaTrackConstraints {\r\n    const result: MediaTrackConstraints = baseMediaTrackConstraints ? baseMediaTrackConstraints : this.DEFAULT_VIDEO_OPTIONS;\r\n    if (deviceId) {\r\n      result.deviceId = {exact: deviceId};\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Tries to harvest the deviceId from the given mediaStreamTrack object.\r\n   * Browsers populate this object differently; this method tries some different approaches\r\n   * to read the id.\r\n   * @param mediaStreamTrack\r\n   * @returns deviceId if found in the mediaStreamTrack\r\n   */\r\n  private static getDeviceIdFromMediaStreamTrack(mediaStreamTrack: MediaStreamTrack): string {\r\n    if (mediaStreamTrack.getSettings && mediaStreamTrack.getSettings() && mediaStreamTrack.getSettings().deviceId) {\r\n      return mediaStreamTrack.getSettings().deviceId;\r\n    } else if (mediaStreamTrack.getConstraints && mediaStreamTrack.getConstraints() && mediaStreamTrack.getConstraints().deviceId) {\r\n      const deviceIdObj: ConstrainDOMString = mediaStreamTrack.getConstraints().deviceId;\r\n      return WebcamComponent.getValueFromConstrainDOMString(deviceIdObj);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tries to harvest the facingMode from the given mediaStreamTrack object.\r\n   * Browsers populate this object differently; this method tries some different approaches\r\n   * to read the value.\r\n   * @param mediaStreamTrack\r\n   * @returns facingMode if found in the mediaStreamTrack\r\n   */\r\n  private static getFacingModeFromMediaStreamTrack(mediaStreamTrack: MediaStreamTrack): string {\r\n    if (mediaStreamTrack) {\r\n      if (mediaStreamTrack.getSettings && mediaStreamTrack.getSettings() && mediaStreamTrack.getSettings().facingMode) {\r\n        return mediaStreamTrack.getSettings().facingMode;\r\n      } else if (mediaStreamTrack.getConstraints && mediaStreamTrack.getConstraints() && mediaStreamTrack.getConstraints().facingMode) {\r\n        const facingModeConstraint: ConstrainDOMString = mediaStreamTrack.getConstraints().facingMode;\r\n        return WebcamComponent.getValueFromConstrainDOMString(facingModeConstraint);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines whether the given mediaStreamTrack claims itself as user facing\r\n   * @param mediaStreamTrack\r\n   */\r\n  private static isUserFacing(mediaStreamTrack: MediaStreamTrack): boolean {\r\n    const facingMode: string = WebcamComponent.getFacingModeFromMediaStreamTrack(mediaStreamTrack);\r\n    return facingMode ? 'user' === facingMode.toLowerCase() : false;\r\n  }\r\n\r\n  /**\r\n   * Extracts the value from the given ConstrainDOMString\r\n   * @param constrainDOMString\r\n   */\r\n  private static getValueFromConstrainDOMString(constrainDOMString: ConstrainDOMString): string {\r\n    if (constrainDOMString) {\r\n      if (constrainDOMString instanceof String) {\r\n        return String(constrainDOMString);\r\n      } else if (Array.isArray(constrainDOMString) && Array(constrainDOMString).length > 0) {\r\n        return String(constrainDOMString[0]);\r\n      } else if (typeof constrainDOMString === 'object') {\r\n        if (constrainDOMString['exact']) {\r\n          return String(constrainDOMString['exact']);\r\n        } else if (constrainDOMString['ideal']) {\r\n          return String(constrainDOMString['ideal']);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.detectAvailableDevices()\r\n      .then(() => {\r\n        // start video\r\n        this.switchToVideoInput(null);\r\n      })\r\n      .catch((err: string) => {\r\n        this.initError.next(<WebcamInitError>{message: err});\r\n        // fallback: still try to load webcam, even if device enumeration failed\r\n        this.switchToVideoInput(null);\r\n      });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.stopMediaTracks();\r\n    this.unsubscribeFromSubscriptions();\r\n  }\r\n\r\n  /**\r\n   * Takes a snapshot of the current webcam's view and emits the image as an event\r\n   */\r\n  public takeSnapshot(): void {\r\n    // set canvas size to actual video size\r\n    const _video = this.nativeVideoElement;\r\n    const dimensions = {width: this.width, height: this.height};\r\n    if (_video.videoWidth) {\r\n      dimensions.width = _video.videoWidth;\r\n      dimensions.height = _video.videoHeight;\r\n    }\r\n\r\n    const _canvas = this.canvas.nativeElement;\r\n    _canvas.width = dimensions.width;\r\n    _canvas.height = dimensions.height;\r\n\r\n    // paint snapshot image to canvas\r\n    const context2d = _canvas.getContext('2d');\r\n    context2d.drawImage(_video, 0, 0);\r\n\r\n    // read canvas content as image\r\n    const mimeType: string = this.imageType ? this.imageType : WebcamComponent.DEFAULT_IMAGE_TYPE;\r\n    const quality: number = this.imageQuality ? this.imageQuality : WebcamComponent.DEFAULT_IMAGE_QUALITY;\r\n    const dataUrl: string = _canvas.toDataURL(mimeType, quality);\r\n\r\n    // get the ImageData object from the canvas' context.\r\n    let imageData: ImageData = null;\r\n\r\n    if (this.captureImageData) {\r\n      imageData = context2d.getImageData(0, 0, _canvas.width, _canvas.height);\r\n    }\r\n\r\n    this.imageCapture.next(new WebcamImage(dataUrl, mimeType, imageData));\r\n  }\r\n\r\n  /**\r\n   * Switches to the next/previous video device\r\n   * @param forward\r\n   */\r\n  public rotateVideoInput(forward: boolean) {\r\n    if (this.availableVideoInputs && this.availableVideoInputs.length > 1) {\r\n      const increment: number = forward ? 1 : (this.availableVideoInputs.length - 1);\r\n      const nextInputIndex = (this.activeVideoInputIndex + increment) % this.availableVideoInputs.length;\r\n      this.switchToVideoInput(this.availableVideoInputs[nextInputIndex].deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switches the camera-view to the specified video device\r\n   */\r\n  public switchToVideoInput(deviceId: string): void {\r\n    this.videoInitialized = false;\r\n    this.stopMediaTracks();\r\n    this.initWebcam(deviceId, this.videoOptions);\r\n  }\r\n\r\n\r\n  /**\r\n   * Event-handler for video resize event.\r\n   * Triggers Angular change detection so that new video dimensions get applied\r\n   */\r\n  public videoResize(): void {\r\n    // here to trigger Angular change detection\r\n  }\r\n\r\n  public get videoWidth() {\r\n    const videoRatio = this.getVideoAspectRatio();\r\n    return Math.min(this.width, this.height * videoRatio);\r\n  }\r\n\r\n  public get videoHeight() {\r\n    const videoRatio = this.getVideoAspectRatio();\r\n    return Math.min(this.height, this.width / videoRatio);\r\n  }\r\n\r\n  public get videoStyleClasses() {\r\n    let classes: string = '';\r\n\r\n    if (this.isMirrorImage()) {\r\n      classes += 'mirrored ';\r\n    }\r\n\r\n    return classes.trim();\r\n  }\r\n\r\n  public get nativeVideoElement() {\r\n    return this.video.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Returns the video aspect ratio of the active video stream\r\n   */\r\n  private getVideoAspectRatio(): number {\r\n    // calculate ratio from video element dimensions if present\r\n    const videoElement = this.nativeVideoElement;\r\n    if (videoElement.videoWidth && videoElement.videoWidth > 0 &&\r\n      videoElement.videoHeight && videoElement.videoHeight > 0) {\r\n\r\n      return videoElement.videoWidth / videoElement.videoHeight;\r\n    }\r\n\r\n    // nothing present - calculate ratio based on width/height params\r\n    return this.width / this.height;\r\n  }\r\n\r\n  /**\r\n   * Init webcam live view\r\n   */\r\n  private initWebcam(deviceId: string, userVideoTrackConstraints: MediaTrackConstraints) {\r\n    const _video = this.nativeVideoElement;\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n\r\n      // merge deviceId -> userVideoTrackConstraints\r\n      const videoTrackConstraints = WebcamComponent.getMediaConstraintsForDevice(deviceId, userVideoTrackConstraints);\r\n\r\n      navigator.mediaDevices.getUserMedia(<MediaStreamConstraints>{video: videoTrackConstraints})\r\n        .then((stream: MediaStream) => {\r\n          this.mediaStream = stream;\r\n          _video.srcObject = stream;\r\n          _video.play();\r\n\r\n          this.activeVideoSettings = stream.getVideoTracks()[0].getSettings();\r\n          const activeDeviceId: string = WebcamComponent.getDeviceIdFromMediaStreamTrack(stream.getVideoTracks()[0]);\r\n\r\n          this.cameraSwitched.next(activeDeviceId);\r\n\r\n          // Initial detect may run before user gave permissions, returning no deviceIds. This prevents later camera switches. (#47)\r\n          // Run detect once again within getUserMedia callback, to make sure this time we have permissions and get deviceIds.\r\n          this.detectAvailableDevices()\r\n            .then(() => {\r\n              this.activeVideoInputIndex = activeDeviceId ? this.availableVideoInputs\r\n                .findIndex((mediaDeviceInfo: MediaDeviceInfo) => mediaDeviceInfo.deviceId === activeDeviceId) : -1;\r\n              this.videoInitialized = true;\r\n            })\r\n            .catch(() => {\r\n              this.activeVideoInputIndex = -1;\r\n              this.videoInitialized = true;\r\n            });\r\n        })\r\n        .catch((err: MediaStreamError) => {\r\n          this.initError.next(<WebcamInitError>{message: err.message, mediaStreamError: err});\r\n        });\r\n    } else {\r\n      this.initError.next(<WebcamInitError>{message: 'Cannot read UserMedia from MediaDevices.'});\r\n    }\r\n  }\r\n\r\n  private getActiveVideoTrack(): MediaStreamTrack {\r\n    return this.mediaStream ? this.mediaStream.getVideoTracks()[0] : null;\r\n  }\r\n\r\n  private isMirrorImage(): boolean {\r\n    if (!this.getActiveVideoTrack()) {\r\n      return false;\r\n    }\r\n\r\n    // check for explicit mirror override parameter\r\n    {\r\n      let mirror: string = 'auto';\r\n      if (this.mirrorImage) {\r\n        if (typeof this.mirrorImage === 'string') {\r\n          mirror = String(this.mirrorImage).toLowerCase();\r\n        } else {\r\n          // WebcamMirrorProperties\r\n          if (this.mirrorImage.x) {\r\n            mirror = this.mirrorImage.x.toLowerCase();\r\n          }\r\n        }\r\n      }\r\n\r\n      switch (mirror) {\r\n        case 'always':\r\n          return true;\r\n        case 'never':\r\n          return false;\r\n      }\r\n    }\r\n\r\n    // default: enable mirroring if webcam is user facing\r\n    return WebcamComponent.isUserFacing(this.getActiveVideoTrack());\r\n  }\r\n\r\n  /**\r\n   * Stops all active media tracks.\r\n   * This prevents the webcam from being indicated as active,\r\n   * even if it is no longer used by this component.\r\n   */\r\n  private stopMediaTracks() {\r\n    if (this.mediaStream && this.mediaStream.getTracks) {\r\n      // getTracks() returns all media tracks (video+audio)\r\n      this.mediaStream.getTracks()\r\n        .forEach((track: MediaStreamTrack) => track.stop());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from all open subscriptions\r\n   */\r\n  private unsubscribeFromSubscriptions() {\r\n    if (this.triggerSubscription) {\r\n      this.triggerSubscription.unsubscribe();\r\n    }\r\n    if (this.switchCameraSubscription) {\r\n      this.switchCameraSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reads available input devices\r\n   */\r\n  private detectAvailableDevices(): Promise<MediaDeviceInfo[]> {\r\n    return new Promise((resolve, reject) => {\r\n      WebcamUtil.getAvailableVideoInputs()\r\n        .then((devices: MediaDeviceInfo[]) => {\r\n          this.availableVideoInputs = devices;\r\n          resolve(devices);\r\n        })\r\n        .catch(err => {\r\n          this.availableVideoInputs = [];\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {WebcamComponent} from './webcam/webcam.component';\n\nconst COMPONENTS = [\n  WebcamComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    COMPONENTS\n  ],\n  exports: [\n    COMPONENTS\n  ]\n})\nexport class WebcamModule {\n}\n","export class WebcamInitError {\r\n  public message: string = null;\r\n  public mediaStreamError: MediaStreamError = null;\r\n}\r\n","export class WebcamMirrorProperties {\r\n  public x: string;  // [\"auto\", \"always\", \"never\"]\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}